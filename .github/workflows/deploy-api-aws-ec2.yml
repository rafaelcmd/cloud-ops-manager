name: Deploy - API to AWS EC2

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1

      - name: Build the application
        run: |
          cd api/cmd/server
          go mod tidy
          go build -o cloud-ops-manager-api
          ls -lah

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Retrieve EC2 data from SSM
        id: ssm
        run: |
          echo "Fetching EC2 connection info..."
          echo "CLOUD_OPS_MANAGER_API_EC2_PUBLIC_IP=$(aws ssm get-parameter --name "/CLOUD_OPS_MANAGER_API/EC2_PUBLIC_IP" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
          echo "CLOUD_OPS_MANAGER_API_EC2_USERNAME=$(aws ssm get-parameter --name "/CLOUD_OPS_MANAGER_API/EC2_USERNAME" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
          echo "CLOUD_OPS_MANAGER_API_EC2_INSTANCE_ID=$(aws ssm get-parameter --name "/CLOUD_OPS_MANAGER_API/EC2_INSTANCE_ID" --query "Parameter.Value" --output text)" >> $GITHUB_ENV

      - name: Generate ephemeral SSH key pair
        run: |
          ssh-keygen -t rsa -b 2048 -f ec2-temp-key -q -N ""
          echo "Generated SSH key pair."

      - name: Adjust permissions and move ephemeral key
        run: |
          chmod 600 ec2-temp-key
          chmod 644 ec2-temp-key.pub
          ls -lah ec2-temp-key*

      - name: Send public key via EC2 Instance Connect
        run: |
          echo "Sending public key to EC2 instance..."
          aws ec2-instance-connect send-ssh-public-key \
            --instance-id "$CLOUD_OPS_MANAGER_API_EC2_INSTANCE_ID" \
            --instance-os-user "$CLOUD_OPS_MANAGER_API_EC2_USERNAME" \
            --ssh-public-key file://ec2-temp-key.pub \
            --availability-zone $(aws ec2 describe-instances --instance-ids "$CLOUD_OPS_MANAGER_API_EC2_INSTANCE_ID" --query "Reservations[0].Instances[0].Placement.AvailabilityZone" --output text)

      - name: SCP binary to EC2
        run: |
          scp -i ec2-temp-key -o StrictHostKeyChecking=no \
            api/cmd/server/cloud-ops-manager-api \
            ${{ env.CLOUD_OPS_MANAGER_API_EC2_USERNAME }}@${{ env.CLOUD_OPS_MANAGER_API_EC2_PUBLIC_IP }}:/home/${{ env.CLOUD_OPS_MANAGER_API_EC2_USERNAME }}/cloud-ops-manager-api
      

      - name: SSH to set permissions and move binary
        run: |
          ssh -i ec2-temp-key -o StrictHostKeyChecking=no \
            ${{ env.CLOUD_OPS_MANAGER_API_EC2_USERNAME }}@${{ env.CLOUD_OPS_MANAGER_API_EC2_PUBLIC_IP }} \
            'sudo chown ec2-user:ec2-user ~/cloud-ops-manager-api && sudo chmod +x ~/cloud-ops-manager-api && sudo mv ~/cloud-ops-manager-api /usr/local/bin/cloud-ops-manager-api'

      - name: Create or restart systemd service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.CLOUD_OPS_MANAGER_API_EC2_PUBLIC_IP }}
          username: ${{ env.CLOUD_OPS_MANAGER_API_EC2_USERNAME }}
          key_path: ec2-temp-key
          script: |
            SERVICE_NAME="cloud-ops-manager-api"
            SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME.service"
            
            sudo mkdir -p /var/log/cloud-ops-manager
            sudo chown ec2-user:ec2-user /var/log/cloud-ops-manager
            
            if [ ! -f "$SERVICE_FILE" ]; then
              echo "Creating systemd service..."
              sudo bash -c "cat > $SERVICE_FILE <<EOF
              [Unit]
              Description=CloudOps Manager API
              After=network.target
            
              [Service]
              ExecStart=/usr/local/bin/$SERVICE_NAME
              Restart=always
              User=${USER}
              StandardOutput=append:/var/log/cloud-ops-manager/api.log
              StandardError=append:/var/log/cloud-ops-manager/api.log
            
              [Install]
              WantedBy=multi-user.target
              EOF"
            fi
            
            sudo systemctl daemon-reload
            sudo systemctl enable "$SERVICE_NAME"
            sudo systemctl restart "$SERVICE_NAME"
            echo "Deployment complete."

      - name: Check service status
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.CLOUD_OPS_MANAGER_API_EC2_PUBLIC_IP }}
          username: ${{ env.CLOUD_OPS_MANAGER_API_EC2_USERNAME }}
          key_path: ec2-temp-key
          script: |
            SERVICE_NAME="cloud-ops-manager-api"
            STATUS=$(sudo systemctl is-active $SERVICE_NAME)

            if [ "$STATUS" = "active" ]; then
              echo "✅ $SERVICE_NAME is running."
            else
              echo "❌ $SERVICE_NAME is not running. Status: $STATUS"
              sudo journalctl -u $SERVICE_NAME --no-pager | tail -n 20
              exit 1
            fi