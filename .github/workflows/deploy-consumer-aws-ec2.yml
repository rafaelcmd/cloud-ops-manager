name: Deploy - Consumer to AWS EC2

on:
  workflow_dispatch:

jobs:
  build-and-deploy-consumer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1

      - name: Build consumer binary
        run: |
          cd services/provisioner/cmd/consumer
          go mod tidy
          go build -o cloud-ops-manager-consumer
          mv cloud-ops-manager-consumer ../../../../cloud-ops-manager-consumer
          ls -lah ../../../../cloud-ops-manager-consumer

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Retrieve deployment values from Parameter Store
        id: ssm
        run: |
          echo "Fetching SSM parameters..."
          echo "CONSUMER_INSTANCE_ID=$(aws ssm get-parameter --name "/CLOUD_OPS_MANAGER_CONSUMER/EC2_INSTANCE_ID" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
          echo "DEPLOY_BUCKET=$(aws ssm get-parameter --name "/CLOUD_OPS_MANAGER_CONSUMER/DEPLOY_BUCKET_NAME" --query "Parameter.Value" --output text)" >> $GITHUB_ENV

      - name: Upload consumer binary to S3
        run: |
          aws s3 cp cloud-ops-manager-consumer s3://$DEPLOY_BUCKET/cloud-ops-manager-consumer
          echo "âœ… Uploaded consumer binary to s3://$DEPLOY_BUCKET/cloud-ops-manager-consumer"

      - name: Create and deploy systemd service (if not exists)
        run: |
          echo "Creating systemd service and deploying binary..."
          aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids "$CONSUMER_INSTANCE_ID" \
          --comment "Create systemd service and deploy binary" \
          --parameters '{
          "commands": [
            "set -e",
            "aws s3 cp s3://cloud-ops-manager-consumer-deploy-bucket/cloud-ops-manager-consumer /usr/local/bin/cloud-ops-manager-consumer",
            "chmod +x /usr/local/bin/cloud-ops-manager-consumer",
            "if [ ! -f /etc/systemd/system/cloud-ops-manager-consumer.service ]; then",
            "sudo tee /etc/systemd/system/cloud-ops-manager-consumer.service > /dev/null <<EOL",
            "[Unit]",
            "Description=CloudOps Manager Consumer",
            "After=network.target",
            "",
            "[Service]",
            "ExecStart=/usr/local/bin/cloud-ops-manager-consumer",
            "Restart=always",
            "User=ec2-user",
            "StandardOutput=append:/var/log/cloud-ops-manager-consumer.log",
            "StandardError=inherit",
            "",
            "[Install]",
            "WantedBy=multi-user.target",
            "EOL",
            "sudo chmod 644 /etc/systemd/system/cloud-ops-manager-consumer.service",
            "sudo systemctl daemon-reload",
            "sudo systemctl enable cloud-ops-manager-consumer",
            "fi"
          ]
          }'

      - name: Restart service
        run: |
          echo "Restarting service..."
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$CONSUMER_INSTANCE_ID" \
            --comment "Restart consumer service" \
            --parameters commands="sudo systemctl restart cloud-ops-manager-consumer"

      - name: Check systemd status
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$CONSUMER_INSTANCE_ID" \
            --comment "Check service status" \
            --parameters commands="systemctl status cloud-ops-manager-consumer || journalctl -u cloud-ops-manager-consumer --no-pager | tail -n 20"
