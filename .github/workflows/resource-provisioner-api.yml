name: Resource Provisioner API

on:
  push:
    branches:
      - main
    paths:
      - '/resource-provisioner-api/**'
  pull_request:
    paths:
      - '/resource-provisioner-api/**'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1

      - name: Build the application
        run: |
          cd resource-provisioner-api/cmd/server
          go mod tidy
          go build -o resource-provisioner-api
          ls -lah

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Retrieve EC2 Data from SSM Parameter Store
        id: ssm_parameters
        run: |
          RESOURCE_PROVISIONER_API_EC2_PUBLIC_IP=$(aws ssm get-parameter --name "/RESOURCE_PROVISIONER_API/EC2_PUBLIC_IP" --query "Parameter.Value" --output text)
          RESOURCE_PROVISIONER_API_EC2_USERNAME=$(aws ssm get-parameter --name "/RESOURCE_PROVISIONER_API/EC2_USERNAME" --query "Parameter.Value" --output text)

          # Save the values as environment variables
          echo "RESOURCE_PROVISIONER_API_EC2_PUBLIC_IP=$RESOURCE_PROVISIONER_API_EC2_PUBLIC_IP" >> $GITHUB_ENV
          echo "RESOURCE_PROVISIONER_API_EC2_USERNAME=$RESOURCE_PROVISIONER_API_EC2_USERNAME" >> $GITHUB_ENV

      - name: Retrieve EC2 Private Key from AWS Secrets Manager
        id: secrets_manager
        run: |
          # Save the key to the workspace directory
          aws secretsmanager get-secret-value --secret-id "resource-provisioner-api-private-key-wd4y5e4r5erb" --query "SecretString" --output text > ec2-private-key.pem
          
          # Ensure the private key is in PEM format
          if ! grep -q "BEGIN RSA PRIVATE KEY" ec2-private-key.pem; then
            echo "Private key is not in PEM format. Please check the key."
            exit 1
          fi

          # Set strict permissions for the private key file
          chmod 600 ec2-private-key.pem
          
          # Debug: Print the private key (first 10 lines)
          echo "EC2 Private Key:"
          head -n 10 ec2-private-key.pem

      - name: Debug File Permissions
        run: |
          echo "File permissions for ec2-private-key.pem:"
          ls -l ec2-private-key.pem

      - name: Start SSH Agent and Add Private Key
        run: |
          # Start the SSH agent
          eval "$(ssh-agent -s)"
          
          # Add the private key to the SSH agent
          ssh-add ec2-private-key.pem

      - name: Transfer the application to the EC2 instance
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.RESOURCE_PROVISIONER_API_EC2_PUBLIC_IP }}
          username: ${{ env.RESOURCE_PROVISIONER_API_EC2_USERNAME }}
          key_path: ec2-private-key.pem
          source: "resource-provisioner-api/cmd/server/resource-provisioner-api"
          target: "/home/ec2-user/resource-provisioner-api"
          port: 22
          timeout: 30s
          command_timeout: 10m

      - name: Set permissions on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.RESOURCE_PROVISIONER_API_EC2_PUBLIC_IP }}
          username: ${{ env.RESOURCE_PROVISIONER_API_EC2_USERNAME }}
          key_path: ec2-private-key.pem
          script: |
            sudo chown ec2-user:ec2-user /home/ec2-user/resource-provisioner-api
            sudo chmod +x /home/ec2-user/resource-provisioner-api
            sudo mv /home/ec2-user/resource-provisioner-api /usr/local/bin/resource-provisioner-api

      - name: Restart systemd service on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.RESOURCE_PROVISIONER_API_EC2_PUBLIC_IP }}
          username: ${{ env.RESOURCE_PROVISIONER_API_EC2_USERNAME }}
          key_path: ec2-private-key.pem
          script: |
            SERVICE_NAME="resource-provisioner-api"
            SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME.service"

            if [ ! -f "$SERVICE_FILE" ]; then
              echo "Creating systemd service file..."
              sudo bash -c "cat > $SERVICE_FILE <<EOF
              [Unit]
              Description=Resource Provisioner API
              After=network.target
            
              [Service]
              ExecStart=/usr/local/bin/$SERVICE_NAME
              Restart=always
              User=ec2-user
              StandardOutput=journal
              StandardError=journal
            
              [Install]
              WantedBy=multi-user.target
              EOF"
            fi
            
            echo "Reloading systemd and restarting service..."
            sudo systemctl daemon-reload
            sudo systemctl enable "$SERVICE_NAME"
            sudo systemctl restart "$SERVICE_NAME"
            echo "Deployment completed successfully"

      - name: Check the status of the systemd service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.RESOURCE_PROVISIONER_API_EC2_PUBLIC_IP }}
          username: ${{ env.RESOURCE_PROVISIONER_API_EC2_USERNAME }}
          key_path: ec2-private-key.pem
          script: |
            SERVICE_NAME="resource-provisioner-api"
            echo "Checking the status of $SERVICE_NAME..."
            STATUS=$(sudo systemctl is-active $SERVICE_NAME)

            if [ "$STATUS" = "active" ]; then
              echo "SUCCESS: $SERVICE_NAME is running properly!"
            else
              echo "ERROR: $SERVICE_NAME is not running! Current status: $STATUS"
              sudo journalctl -u $SERVICE_NAME --no-pager | tail -n 20
              exit 1
            fi