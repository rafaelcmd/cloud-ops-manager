services:
  resource-provisioner-api:
    container_name: resource-provisioner-api
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - resource-provisioner-consumer-network
    restart: on-failure

  resource-provisioner-consumer:
    container_name: resource-provisioner-consumer
    build:
      context: ./services/resource-provisioner-consumer
      dockerfile: Dockerfile
    ports:
      - "6000:6000"
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - resource-provisioner-consumer-network
    restart: on-failure

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      retries: 10
    depends_on:
      - zookeeper
    networks:
      - resource-provisioner-consumer-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - resource-provisioner-consumer-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - resource-provisioner-consumer-network

  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: prometheus
    volumes:
      - ./services/resource-provisioner-consumer/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - resource-provisioner-consumer-network

networks:
  resource-provisioner-consumer-network:
    external: true

volumes:
  kafka-data:
